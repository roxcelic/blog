---
import Link from '../components/link.astro';
import { getSortedPosts } from '../lib/posts.ts';

const posts = getSortedPosts();
---
<div style="text-align: center; justify-content: center; position: relative;">
    <div id="blog-post-container">
        {posts.map((post) => (
            <Link 
                url={post.url}
                title={post.title}
                dates={post.upDate}
                auth={post.auth}
                desc={post.desc}
                writedate={post.writeDate}
                tags={post.tags}
                update={post.upDate}
            />
        ))}
    </div>
    <hr style="width: 60%; margin-left: 20%;" />
    <div style="justify-content: space-between; display: flex; width: 40%; margin: auto;">
        <span class="material-symbols-outlined" style="display: inline;" id="back">skip_previous</span>
        <span class="material-symbols-outlined" style="display: inline;" id="play">play_arrow</span>
        <span class="material-symbols-outlined" style="display: inline;" id="forward">skip_next</span>
    </div>
</div>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        const parentDiv = document.querySelector('#blog-post-container');
        const children = Array.from(parentDiv.children);
        let active = 0;
        const playButton = document.getElementById('play');
        const backButton = document.getElementById('back');
        const forwardButton = document.getElementById('forward');

        playButton.addEventListener('click', play);
        backButton.addEventListener('click', back);
        forwardButton.addEventListener('click', forward);

        function back() {
            if (active > 0) {
                active--;
                updateDisplay();
            }
        }

        function forward() {
            if (active < children.length - 1) {
                active++;
                updateDisplay();
            }
        }

        function play() {
            window.location.href = children[active].firstElementChild.href;
        }

        function updateDisplay() {
            children.forEach((child, index) => {
                child.style.opacity = index === active ? '1' : '0';
            });

            backButton.style.opacity = active > 0 ? '1' : '0.5';
            forwardButton.style.opacity = active < children.length - 1 ? '1' : '0.5';
        }

        document.addEventListener('keydown', (event) => {
            if (['INPUT', 'TEXTAREA'].includes(event.target.tagName) || event.target.isContentEditable) {
                return;
            }

            switch (event.key) {
                case 'ArrowRight':
                case 'd':
                    forward();
                    break;
                case 'ArrowLeft':
                case 'a':
                    back();
                    break;
                case 'Enter':
                case 'c':
                    play();
                    break;
            }
        });

        // Initialize display
        updateDisplay();
    });
</script>
